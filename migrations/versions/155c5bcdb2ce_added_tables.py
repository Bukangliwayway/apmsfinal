"""added tables

Revision ID: 155c5bcdb2ce
Revises: 
Create Date: 2023-11-07 21:38:08.381260

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '155c5bcdb2ce'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('classification',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_classification_name'), 'classification', ['name'], unique=False)
    op.create_table('user',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('profile_picture', sa.String(), server_default='#', nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('role', sa.String(), server_default='public', nullable=False),
    sa.Column('sub', sa.String(), nullable=True),
    sa.Column('student_number', sa.String(), nullable=True),
    sa.Column('headline', sa.Text(), nullable=True),
    sa.Column('birthdate', sa.Date(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('civil_status', sa.String(), nullable=True),
    sa.Column('gender', sa.String(), nullable=True),
    sa.Column('year_graduated', sa.Integer(), nullable=True),
    sa.Column('post_grad_act', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('achievements', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('achievements_story', sa.Text(), nullable=True),
    sa.Column('present_employment_status', sa.String(), server_default='unemployed', nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_role'), 'user', ['role'], unique=False)
    op.create_index(op.f('ix_user_student_number'), 'user', ['student_number'], unique=True)
    op.create_index(op.f('ix_user_sub'), 'user', ['sub'], unique=True)
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table('course',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_course_name'), 'course', ['name'], unique=False)
    op.create_table('employment',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('company_name', sa.String(), nullable=False),
    sa.Column('date_hired', sa.Date(), nullable=False),
    sa.Column('date_end', sa.Date(), nullable=True),
    sa.Column('gross_monthly_income', sa.String(), nullable=False),
    sa.Column('employment_contract', sa.String(), nullable=False),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('is_international', sa.Boolean(), server_default='False', nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_employment_city'), 'employment', ['city'], unique=False)
    op.create_index(op.f('ix_employment_date_hired'), 'employment', ['date_hired'], unique=False)
    op.create_table('course_classification',
    sa.Column('course_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('classification_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['classification_id'], ['classification.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('course_id', 'classification_id')
    )
    op.create_table('job',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('employment_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['employment_id'], ['employment.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_job_name'), 'job', ['name'], unique=False)
    op.create_table('job_classification',
    sa.Column('job_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('classification_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['classification_id'], ['classification.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['job_id'], ['job.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('job_id', 'classification_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('job_classification')
    op.drop_index(op.f('ix_job_name'), table_name='job')
    op.drop_table('job')
    op.drop_table('course_classification')
    op.drop_index(op.f('ix_employment_date_hired'), table_name='employment')
    op.drop_index(op.f('ix_employment_city'), table_name='employment')
    op.drop_table('employment')
    op.drop_index(op.f('ix_course_name'), table_name='course')
    op.drop_table('course')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_index(op.f('ix_user_sub'), table_name='user')
    op.drop_index(op.f('ix_user_student_number'), table_name='user')
    op.drop_index(op.f('ix_user_role'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_classification_name'), table_name='classification')
    op.drop_table('classification')
    # ### end Alembic commands ###
